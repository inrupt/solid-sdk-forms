{"version":3,"sources":["../src/index.js"],"names":["isIgnored","WILDCARDS","c","match","valid","split","shift","replace","trim","commit","opts","ignores","Array","isArray","Error","invalids","filter","length","map","i","join","base","defaults","some","w"],"mappings":";;;;;;kBAuBwBA,S;;AAvBxB;;;;;;AAEO,MAAMC,gCAAY,CACxBC,KACCA,EAAEC,KAAF,CACC,mFADD,CAFuB,EAKxBD,KAAKA,EAAEC,KAAF,CAAQ,kBAAR,CALmB,EAMxBD,KAAKA,EAAEC,KAAF,CAAQ,kBAAR,CANmB,EAOxBD,KACC,iBAAOE,KAAP,CACCF,EACEG,KADF,CACQ,IADR,EAEEC,KAFF,GAGEC,OAHF,CAGU,qBAHV,EAGiC,EAHjC,EAIEC,IAJF,EADD,CARuB,EAexBN,KAAKA,EAAEC,KAAF,CAAQ,6BAAR,CAfmB,EAgBxBD,KAAKA,EAAEC,KAAF,CAAQ,oCAAR,CAhBmB,EAiBxBD,KAAKA,EAAEC,KAAF,CAAQ,sBAAR,CAjBmB,EAkBxBD,KAAKA,EAAEC,KAAF,CAAQ,8BAAR,CAlBmB,CAAlB;;AAqBQ,SAASH,SAAT,CAAmBS,SAAS,EAA5B,EAAgCC,OAAO,EAAvC,EAA2C;AACzD,OAAMC,UAAU,OAAOD,KAAKC,OAAZ,KAAwB,WAAxB,GAAsC,EAAtC,GAA2CD,KAAKC,OAAhE;;AAEA,KAAI,CAACC,MAAMC,OAAN,CAAcF,OAAd,CAAL,EAA6B;AAC5B,QAAM,IAAIG,KAAJ,CACJ,2CAA0CH,OAAQ,YAAW,OAAOA,OAAQ,EADxE,CAAN;AAGA;;AAED,OAAMI,WAAWJ,QAAQK,MAAR,CAAed,KAAK,OAAOA,CAAP,KAAa,UAAjC,CAAjB;;AAEA,KAAIa,SAASE,MAAT,GAAkB,CAAtB,EAAyB;AACxB,QAAM,IAAIH,KAAJ,CACJ,mEAAkEC,SACjEG,GADiE,CAC7DC,KAAK,OAAOA,CADiD,EAEjEC,IAFiE,CAE5D,IAF4D,CAEtD,EAHR,CAAN;AAKA;;AAED,OAAMC,OAAOX,KAAKY,QAAL,KAAkB,KAAlB,GAA0B,EAA1B,GAA+BrB,SAA5C;AACA,QAAO,CAAC,GAAGoB,IAAJ,EAAU,GAAGV,OAAb,EAAsBY,IAAtB,CAA2BC,KAAKA,EAAEf,MAAF,CAAhC,CAAP;AACA","file":"index.js","sourcesContent":["import semver from 'semver';\n\nexport const WILDCARDS = [\n\tc =>\n\t\tc.match(\n\t\t\t/^((Merge pull request)|(Merge (.*?) into (.*?)|(Merge branch (.*?)))(?:\\r?\\n)*$)/m\n\t\t),\n\tc => c.match(/^(R|r)evert (.*)/),\n\tc => c.match(/^(fixup|squash)!/),\n\tc =>\n\t\tsemver.valid(\n\t\t\tc\n\t\t\t\t.split('\\n')\n\t\t\t\t.shift()\n\t\t\t\t.replace(/^chore(\\([^)]+\\))?:/, '')\n\t\t\t\t.trim()\n\t\t),\n\tc => c.match(/^Merged (.*?)(in|into) (.*)/),\n\tc => c.match(/^Merge remote-tracking branch (.*)/),\n\tc => c.match(/^Automatic merge(.*)/),\n\tc => c.match(/^Auto-merged (.*?) into (.*)/)\n];\n\nexport default function isIgnored(commit = '', opts = {}) {\n\tconst ignores = typeof opts.ignores === 'undefined' ? [] : opts.ignores;\n\n\tif (!Array.isArray(ignores)) {\n\t\tthrow new Error(\n\t\t\t`ignores must be of type array, received ${ignores} of type ${typeof ignores}`\n\t\t);\n\t}\n\n\tconst invalids = ignores.filter(c => typeof c !== 'function');\n\n\tif (invalids.length > 0) {\n\t\tthrow new Error(\n\t\t\t`ignores must be array of type function, received items of type: ${invalids\n\t\t\t\t.map(i => typeof i)\n\t\t\t\t.join(', ')}`\n\t\t);\n\t}\n\n\tconst base = opts.defaults === false ? [] : WILDCARDS;\n\treturn [...base, ...ignores].some(w => w(commit));\n}\n"]}